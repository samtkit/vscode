{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SAMT",
	"foldingStartMarker": "[{\\[]\\s*$",
	"foldingStopMarker": "^\\s*[}\\]]",
	"patterns": [
		{
			"include": "#code"
		}
	],
	"fileTypes": [
		"samt"
	],
	"repository": {
		"code": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#invalid-identifier"
				},
				{
					"include": "#inner-keywords"
				},
				{
					"include": "#import"
				},
				{
					"include": "#package-declaration"
				},
				{
					"include": "#type-alias"
				},
				{
					"include": "#record-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#service-declaration"
				},
				{
					"include": "#provider-declaration"
				},
				{
					"include": "#consumer-declaration"
				},
				{
					"include": "#annotation"
				},
				{
					"include": "#delimiter"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#package"
				}
			]
		},
		"import": {
			"name": "meta.import.samt",
			"begin": "(?<!\\^)\\b(import)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.import.samt"
				}
			},
			"end": "(?<!\\^)(?=\\b(import|package|typealias|record|enum|service|provide|consume)\\b)",
			"patterns": [
				{
					"name": "meta.import.as.samt",
					"begin": "(?<!\\^)(?=\\b(as)\\b)",
					"end": "(?<!\\^)(?=\\b(import|package|typealias|record|enum|service|provide|consume)\\b)",
					"patterns": [
						{
							"include": "#code"
						},
						{
							"name": "entity.name.type.samt",
							"match": "\\b(\\w+)\\b"
						}
					]
				},
				{
					"include": "#code"
				},
				{
					"name": "entity.name.type.samt",
					"match": "\\b(\\w+)\\b"
				}
			]
		},
		"package-declaration": {
			"name": "meta.package.samt",
			"begin": "(?<!\\^)\\b(package)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.package.samt"
				}
			},
			"end": "(?<!\\^)(?=\\b(import|package|typealias|record|enum|service|provide|consume)\\b)",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"name": "entity.name.namespace.samt",
					"match": "\\b(\\w+)\\b"
				}
			]
		},
		"type-alias": {
			"name": "meta.typealias.samt",
			"begin": "(?<!\\^)\\b(typealias)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.typealias.samt"
				}
			},
			"end": "(?<!\\^)(?=\\b(import|package|typealias|record|enum|service|provide|consume)\\b)",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"name": "entity.name.type.samt",
					"match": "\\b\\w+\\b"
				}
			]
		},
		"record-declaration": {
			"name": "meta.record.samt",
			"begin": "(?<!\\^)\\b(record)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.record.samt"
				}
			},
			"end": "(?<!\\^)(?=\\b(import|package|typealias|record|enum|service|provide|consume)\\b)",
			"patterns": [
				{
					"begin": "(?<!\\^)(?<=\\brecord\\b)",
					"end": "((?<!\\^)(?=(\\b(extends)\\b)))|(?={)",
					"patterns": [
						{
							"include": "#code"
						},
						{
							"name": "entity.name.type.record.samt",
							"match": "\\b(\\w+)\\b"
						}
					]
				},
				{
					"begin": "(?<!\\^)(?<=\\bextends\\b)",
					"end": "(?={)",
					"patterns": [
						{
							"include": "#code"
						},
						{
							"name": "entity.name.type.record.samt",
							"match": "\\b(\\w+)\\b"
						}
					]
				},
				{
					"begin": "{",
					"end": "}",
					"patterns": [
						{
							"include": "#code"
						},
						{
							"begin": "\\b(\\w+)\\b",
							"beginCaptures": {
								"1": {
									"name": "variable.other.property.record.samt"
								}
							},
							"end": "(?=:)",
							"patterns": [
								{
									"include": "#code"
								}
							]
						}
					]
				},
				{
					"include": "#code"
				}
			]
		},
		"enum-declaration": {
			"name": "meta.enum.samt",
			"begin": "(?<!\\^)\\b(enum)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.enum.samt"
				}
			},
			"end": "}",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"begin": "\\b(\\w+)\\b",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.enum.samt"
						}
					},
					"end": "{",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "(?<={)",
					"end": "(?=})",
					"patterns": [
						{
							"include": "#code"
						},
						{
							"name": "variable.other.enummember.samt",
							"match": "\\b(\\w+)\\b"
						}
					]
				}
			]
		},
		"service-declaration": {
			"name": "meta.service.samt",
			"begin": "(?<!\\^)\\b(service)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.interface.service.samt"
				}
			},
			"end": "}",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"begin": "\\b(\\w+)\\b",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.interface.service.samt"
						}
					},
					"end": "{",
					"patterns": [
						{
							"include": "#code"
						},
						{
							"name": "entity.name.type.interface.service.samt",
							"match": "\\b\\w+\\b"
						}
					]
				},
				{
					"begin": "(?<={)",
					"end": "(?=})",
					"patterns": [
						{
							"begin": "\\b(\\w+)\\b\\s*\\(",
							"beginCaptures": {
								"1": {
									"name": "entity.name.function.member.operation.samt"
								}
							},
							"end": "\\)",
							"patterns": [
								{
									"include": "#code"
								},
								{
									"begin": "\\b(\\w+)\\b",
									"beginCaptures": {
										"1": {
											"name": "variable.parameter.samt"
										}
									},
									"end": "(?=:)",
									"patterns": [
										{
											"include": "#code"
										}
									]
								}
							]
						},
						{
							"name": "meta.service.operation.raises.samt",
							"begin": "(?<!\\^)\\b(raises)\\b",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.raises.samt"
								} 
							},
							"end": "(?=(\\w+\\s*\\()|})",
							"patterns": [
								{
									"include": "#code"
								},
								{
									"name": "entity.name.type.record.fault.samt",
									"match": "\\b\\w+\\b"
								}
							]
						},
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"provider-declaration": {
			"name": "meta.provider.samt",
			"begin": "(?<!\\^)\\b(provide)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.provider.samt"
				}
			},
			"end": "}",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"begin": "\\b\\w+\\b",
					"beginCaptures": {
						"0": {
							"name": "entity.name.type.provider.samt"
						}
					},
					"end": "{",
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "(?<={)",
					"end": "(?=})",
					"patterns": [
						{
							"name": "meta.provider.implements.samt",
							"begin": "(?<!\\^)\\b(implements)\\b",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.implements.samt"
								}
							},
							"end": "(?<!\\^)(?=(\\b(implements|transport)\\b)|})",
							"patterns": [
								{
									"begin": "{",
									"end": "}",
									"patterns": [
										{
											"include": "#code"
										},
										{
											"name": "entity.name.function.member.operation.samt",
											"match": "\\b\\w+\\b"
										}
									]
								},
								{
									"include": "#code"
								},
								{
									"name": "entity.name.type.interface.service.samt",
									"match": "\\b\\w+\\b"
								}
							]
						},
						{
							"name": "meta.provider.transport.samt",
							"begin": "(?<!\\^)\\b(transport)\\b",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.transport.samt"
								}
							},
							"end": "(?<!\\^)(?=(\\b(implements|transport)\\b)|})",
							"patterns": [
								{
									"include": "#code"
								},
								{
									"name": "support.function.transport.samt",
									"match": "\\b(\\w+)\\b"
								}
							]
						},
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"consumer-declaration": {
			"name": "meta.consumer.samt",
			"begin": "(?<!\\^)\\b(consume)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.consumer.samt"
				}
			},
			"end": "}",
			"patterns": [
				{
					"begin": "\\b\\w+\\b",
					"beginCaptures": {
						"0": {
							"name": "entity.name.type.provider.samt"
						}
					},
					"end": "{",
					"patterns": [
						{
							"include": "#code"
						},
						{
							"name": "entity.name.type.provider.samt",
							"match": "\\b\\w+\\b"
						}
					]
				},
				{
					"begin": "(?<={)",
					"end": "(?=})",
					"patterns": [
						{
							"name": "meta.consumer.uses.samt",
							"begin": "(?<!\\^)\\b(uses)\\b",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.uses.samt"
								} 
							},
							"end": "((?<!\\^)(?=\\b(uses)\\b))|(?=})",
							"patterns": [
								{
									"begin": "{",
									"end": "}",
									"patterns": [
										{
											"include": "#code"
										},
										{
											"name": "entity.name.function.member.operation.samt",
											"match": "\\b\\w+\\b"
										}
									]
								},
								{
									"include": "#code"
								},
								{
									"name": "entity.name.type.service.samt",
									"match": "\\b\\w+\\b"
								}
							]
						},
						{
							"include": "#code"
						}
					]
				},
				{
					"include": "#code"
				}
			]
		},
		"delimiter": {
			"name": "punctuation.separator.delimiter.samt",
			"match": ","
		},
		"annotation": {
			"name": "meta.declaration.annotation.samt",
			"begin": "@",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.annotation.samt"
				}
			},
			"end": "\\b\\w+\\b",
			"endCaptures": {
				"0": {
					"name": "entity.name.type.annotation.samt"
				}
			},
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#block-comment"
				},
				{
					"include": "#line-comment"
				}
			]
		},
		"block-comment": {
			"name": "comment.block.samt",
			"begin": "/\\*",
			"end": "\\*/"
		},
		"line-comment": {
			"name": "comment.line.double-slash.samt",
			"begin": "//",
			"end": "$"
		},
		"inner-keywords": {
			"name": "keyword.other.$1.samt",
			"match": "(?<!\\^)\\b(as|extends|raises|implements|transport|uses|raises|async|oneway)\\b"
		},
		"expressions": {
			"patterns": [
				{
					"include": "#boolean-constant"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#number-literal"
				},
				{
					"include": "#type"
				},
				{
					"include": "#constraint"
				},
				{
					"include": "#generics"
				},
				{
					"include": "#parenthesized-expression"
				},
				{
					"include": "#object-literal"
				},
				{
					"include": "#array-literal"
				}
			]
		},
		"boolean-constant": {
			"name": "constant.language.boolean.samt",
			"match": "(?<!\\^)\\b(true|false)\\b"
		},
		"string-literal": {
			"name": "string.quoted.double.samt",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.samt",
					"match": "\\\\."
				}
			]
		},
		"number-literal": {
			"name": "constant.numeric.decimal.samt",
			"match": "\\b\\d+(\\.\\d+)?"
		},
		"invalid-identifier": {
			"name": "invalid.illegal.identifier.samt",
			"match": "\\b\\d+(\\.\\d+)?[a-zA-Z_]\\w*\\b"
		},
		"type": {
			"comment": "types are usually declared after colons or equals signs for aliases",
			"begin": "[:=]",
			"end": "(\\b\\w+\\b)(?!\\s*\\.)",
			"endCaptures": {
				"1": {
					"name": "entity.name.type.samt"
				}
			},
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"constraint": {
			"begin": "\\b(\\w+)\\b\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.constraint.samt"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"generics": {
			"begin": "<",
			"end": ">",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"name": "entity.name.type.samt",
					"match": "\\b(\\w+)\\b"
				}
			]
		},
		"parenthesized-expression": {
			"begin": "\\(",
			"end": "\\)",
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"object-literal": {
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"include": "#code"
				},
				{
					"begin": "\\b(\\w+)\\b",
					"beginCaptures": {
						"1": {
							"name": "variable.other.property.object.samt"
						}
					},
					"end": ":",
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"array-literal": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"package": {
			"begin": "\\b\\w+\\b(?=\\s*\\.)",
			"beginCaptures": {
				"0": {
					"name": "entity.name.namespace.samt"
				}
			},
			"end": "\\.",
			"patterns": [
				{
					"include": "#code"
				}
			]
		} 
	},
	"scopeName": "source.samt"
}
